پیاده سازی پروژه :----------------------------------------------------------------------------------
1- create assets folder and  define assets to pubspec

2- define fonts to pubspec

3- data.dart -> provide fake data

4- clear auto generate codes : MyHomePage & MyHomePageState from main



Flutter_gen-------------------------------------------------------------------کتابخانه مدیریت assets
دیگه نیازی نیست از آدرس عکس به صورت هارد کد برای دسترسی به asset های پروژه استفاده کنیم
این لایبرری در واقع یک code generator است
 که میاد یک سری کلاس هایی را میسازه که از طریق getter هاشون میتونیم به فایل ها دسترسی داشته باشیم
مشابه کاری که توی اندروید انجام میدیم

add lib -> terminal -> dart pub global activate flutter_gen

قدم به قدم با راهنمای خودش پیش برید
نکته ای که وجود دراه باید از قبل asset هاتون رو توی pubspec تعریف کرده باشید
نکته جالب دیگه اینکه فونت ها رو هم تشخیص میده

بعد برید توی main تایپ کنید Assets و لابرری را ایمپورت کنید

دیگه نیازی نیست عکس ها را به روش زیر برگردونیم
 Image.asset(
   /*این خط کد با خط پایینیش دقیقا معادل هم هستن */
   Assets.img.icons.notification.path,
   // 'assets/img/icons/notification.png',
   width: 24,
   height: 24,
 ),

 خط کد زیر دقیقا یک ویجت Image برمیگردونه
Assets.img.icons.notification.image()

با اجرای کامندهایی که زدیم یک دایرکتوری gen در فولدر lib درست شده که
کلاس های generate شده توسط این لابرری داخلش هستن

 هر وقت تغییری توی فایل هاتون دادید کامندشو بزنید دوباره کلاس هاش آپدیت میشن

برای فونت ها و نگهداری رنگ ها به صورت xml هم به کار میاد این لایبرری

برای استفاده از فونت ها به جای اینکه نام فونت در pubspec را استفاده کنیم از
FontFamily.fontName
استفاده میکنیم

برای استفاده از آیکون های svg هم چیزایی را که گفته توی pubspec اضافه میکنیم
flutter_gen:
  integrations:
    flutter_svg: true

همچنین باید پکیج flutter svg را هم نصب کنیم
https://pub.dev/packages/flutter_svg/install

بعد کامند زیر را بزنیم بعد از هر بار تغییر برای generate شدن چیزهای جدید
flutter packages pub run build_runner build

نحوه استفاده
 As sets.img.icons.logo.svg(width: 24 , height : 24 )

Intent----------------------------------------------------------------------------------------------
1- stateful
برای استفاده از اینتنت + تایمر ابتدا تبدیل به stateful کنید
2- override initState
3- Future.delay
یک کلاسی داریم به نام Future که یک متدی دارد به اسم delay که به وسیله اون میتونیم تاخیر ایجاد کنیم
بعد در متد then مینویسیم که بعد این زمان که طی شد قرار است چه اتفاقی رخ دهد
4- intent
برای جا به جا شدن  بین صفحات از Navigator استفاده میکنیم
برای ایجاد INSTANCE از این  navigator از مند of استفاده میکنیم
بعد در متد push که به معنی هل دادن است مسیرشو براش مشخص میکنیم
از کلاس MaterialPageRoute برای مسیریابی استفاده میکنیم
یک فانکشن به اسم builder بهش پاس میدیم که یک متدی دارد که ورودی آن یک context است
بعد صفحه ای که قرار است نمایش داده شود را داخل این متد بهش میدیم
که باید return شود داخل این متد

MaterialPageRoute vs CupertinoPageRoute
نحوه navigate شدن بین صفحات در گوشی های اندرویدی و آیفون متفاوت است ودر آیفون اسلاید میشه

push vs pushReplacement
اگر از push استفاده کنیم دوباره به صفحه قبلی برمیگردیم
اگر میخواهیم برنگردیم باید از pushReplacement استفاده کنیم

onBoarding------------------------------------------------------------------------------------------
صفحه ای است که یک سری اطلاعات کلی در مورد اپلیکیشن به کاربر میده
برای معرفی فیچرها و امکانات اصلی اپ

apply vs copyWith-----------------------------------------------------------------------------------
apply:
اون تغییر را میاد اپلای میکنه روی تمی که تعریف کردیم
copyWith:
کپی میکنه و شما همه خصوصیت ها را میتونید تغییر بدید

مثلا وقتی از اپلای استفاده میکنید نمیتونید بیاید دقیق بگید fontWeight چقده و باید fontWeighDelta بدید
یعنی چقدر باید نسبت به فونتی که براش توی تم تعریف کردمی باید تغییر کند

کلیک روی آیتم های لیست------------------------------------------------------------------------------
1-
آیتم لیست را داخل یک inkwell قرار میدیم که قابل کلیک کردن باشه
2-
توی کلیک یک intent میزنیم به صفحه جدید

این روش خیلی ساده و خوبه
ولی اگه بخوایم صفحه جدید که باز میشه bottom nav همچنان زیرش باشه چی

1-
قبلا داخل صفحه main داخل IndexedStack
میومدیم اسکرین هایی که میخواستیم با کلیک روی هر آیتم لود بشن رو مینوشتیم
الان همه اونا را پاک میکنیم و جاش Navigator میذاریم
پس قبلا ۴ تا کلاس بود الان ۴ تا navigator

2-
این navigator ها یک attr دارند به اسم onGenerateRoute
 این چیکار میکنه؟
 میاد ستینگ های درخواستی برای ساختن یک مسیر را برمیگردونه
 ما کاری به این ستینگ هم نداریم
 میایم میگیم بیا یک MaterialPageRoute برگردون

پس تنها تفاوتی که تا اینجا داشته به جای اینکه صفحه ها را مستقیم برگردونیم
میایم با استفاده از navigator برمیگردونیم
این کاری که ما میکننیم باعث میشه هر کدوم از این navigator ها یک استک جداگونه برای خودشون داشته باشن
که جلوتر میببینیم چه معنی ای داره

تا اینجا اگه بریم روی آیتم های لیست کلیک کنیم صفحه جدید در حالی باز میشه که bottomNav همچنان اون پایینه

3-
مشکلی که الان داریم اینه توی هر صفحه ای باشیم بک گوشی را که بزنیم اپ کلا بسته میشه
ولی باید برگردیم به صفحه هوم و صفحه هوم نمایش داده بشه

علت این مووع اینه که ما الان با بک زدن داریم navigator ریشه را میبندیم
و ما هم توی روت فقط یک صفحه به اسم main داریم
پس وقتی بک رو میزنیم این main هم بسته میشه

برای کاستومایز کردن این عملیات پاپ کردن باید چه کار کرد؟

برای این کار میایم از یک ویجتی استفاده میکنیم به اسم WillPopScope
و توی attr onWillPop باید یک فانکشن بهش پاس بدیم که میایم این فانکشن را مینویسیم

برای شروع صرفا false را return میکنیم
چه اتفاقی می افته؟
کلا دکمه بک گوشی غیرفعال میشه

حالا ما چطور از این استفاده میکنیم؟
میایم چک میکنیم اگه داخل navigator ی که هستیم آیا داره صفحه ای نمایش داده میشه یا نه؟
به عبارتی یعنی صفحات تو در تو داریم یا نه داخل استک هوم مثلا
اگه داریم از اونجا پاپ میکنیم در غیر این صورت کلا میگیم بیا اپ رو ببند

ساختار استک چطوریه؟
last in first out

برای این کار به ازای هر کدام از تب هایی که داریم میایک یک instance از globalKey میسازیم

key:
یک مقدار یونیک است که به ویجت های خودمون اختصاص میدیم
و از اون طریق میتونیم به state های ویجت دسترسی داشته باشیم

هر ویجت stateful ای این state ها را دارد

وقتی این ها رو ساختید میاید به عنوان key پاس میدید به سازنده navigator

ما میتونیم از ططریق این کلیدها یک متد canPop را صدا بزنیم
key.currentState.canPop()
ولی ما فقط میدونیم توی کدوم index هستیم. چطور دسترسی به کلیدش داشته باشیم؟

    if (_homeKey.currentState!.canPop()){
      _homeKey.currentState!.pop() ;
    }

با کد بالا این موضوع را میتونیم برای هوم چک کنیم
ولی کا که فقط یک صفحه نداریم
 پس میایم یک map میسازیم به این منظور
 ...

 بعد از پیاده سازی این موضوع با مپ نه تنها دکمه بک درست میشه
  بلکه وقتی برمیگردیم state صفحه قبلی هم حفظ شده
   که نکته خیلی مهمیه و پیاده سازیش توی پلتفرم های دیگه واقعا سخته


 4-
 الان مشکلی که داریم اینه که اگه توی تب های دیگه باشیم و بک بزنیم به جای برگشتن به هوم از اپ خارج میشیم

  استک ما فقط نباید برای داخل یک تب باشه و باید بتونیم بین تب ها را هم هندل کنیم
  برای ایجاد استک بین تب های افقی:

  یک لسیت integer میسازیم و سلسه مراتب تب هایی که انتخاب میشه رو توش نگه میداریم به اسم _history
  هر تبی را کاربر انتخاب کنه تب قبلی را توی این اد میکنیم
  ولی قبلش چک میکنیم اگه این تب قبلا وجود داشته پاکش کن از توی لیست
  یعنی فقط یک نمونه از هر تب را توی حافظه نگه میداریم 
  بعد چک میکنیم اگه خالی نبود navigator باید بره روی اون تب  



