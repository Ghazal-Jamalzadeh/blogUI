SafeArea--------------------------------------------------------------------------------------------
چون فلاتر مالتی پلتفرم است استاتوس بار اندروید را به صورت پیش فرض به رسمیت نمیشناسد
برای ios هم ناچ هست که باید هندل شود...
اگر Scaffold ی که استفاده میکنیم اپ بار داشته باشد مشکل خود به خود حل میشه
ولی در صورت تعریف نکردن اپ بار بالای صفحه از پشت استاتوس بار یا پشت ناچ شروع میشه
برای حل این مشکل یک ویجت خیلی کاربردی به اسم safeArea داریم
این ویجت با توجه به اینکه تو اندروید هستیم یا آیفون سایز استاتوس بار یا ناچ را محاسبه میکند و لحاظ میکند

ListView--------------------------------------------------------------------------------------------
ListView = recyclerView
یک named constructor دارد به اسم builder که برای بازیافت شدن ویوها به شکل مناسبی باید ازش استفاده کنیم
بعد براش تعریف میکنیم که چند تا آیتم داریم و آیتم های ما از کجا داره میاد

** itemBuilder :
این builder یک پارامتری میگیره از جنس فانکشن
پارامتر اول این فانکشن context است
پارامتر دوم index آن آیتمی است که قرار است نمایش بدیم
نهایتا چیزی که return میکند یک ویجت است که ui آیتم های لیست ماست
این بلاک به ازای تمام آیتم های لیست یک بار اجرا میشه

** itemCount :
تعداد آیتم ها

** scrollDirection :
جهت لیست ویو به صورت پیش فرض vertical است که اگه افقی میخوایم حتما باید ذکر کنیم

اگه ارتفاع مشخصی به این لیست ویو ندیم با ارور زیر رو به رو میشیم
Vertical viewport was given unbounded height.

برای رفع ارور بالا میایم کل لیست ویو را داخل یک container یا sizedBox میذاریم
فرقشون اینه به container علاوه بر سایز میشه استایل هم داد

یک راه دیگر برای رو به رو شندن با ارور ارتفاع لیست
 /* باید ارتفاع پست ها مشخص باشد که بدونه چقدر میتونه ادامه بده لیست را */
            itemExtent:141 ,
/* برای لیست های طولانی و تو درتو این را true نکنید چون پرفورمنس بد میشه */
/* توی فلاتر width height برای تکست ویو باید کاملا مشخص باشه */
            shrinkWrap: true,
ارتفاع هر آیتم لیست را بهش میدیم و shrinkWrap هم چک میکند چند تا آیتم دارد این را ضربدر تعداد میکند و ارتفاع لیست را به دست میاورد


Nested Scrolling :
مدیریت اسکرول های تو در تو
 physics: ClampingScrollPhysics(),

match parent----------------------------------------------------------------------------------------
برای match parent کردن یک ویو میایم داخل SizedBox قرارش میدیم و خط کد زیر را مینویسیم
 width: MediaQuery.of(context).size.width,
 در فاکشن build همیشه به context دسترسی داریم
 و سایز هم یعنی سایز کل صفحه
 میتونیم انتخاب کنیم width یا height

gradiant--------------------------------------------------------------------------------------------
یک container بسازید
بهش decoration بدید
از attr gradiant استفاده کنید که یک لیست رنگ میگیرد و یک جهت شروع

Stack-----------------------------------------------------------------------------------------------
برای رو هم چیدن آیتم ها
تعدادی children میگیرد و به ترتیبی که بنویسیم روی هم قرار می گیرند

Positioned------------------------------------------------------------------------------------------
این ویجت داخل استک قرار میگیره
و شبیه constraint layout چهار تا جهت داره که میتونیم بگیم فاصله ش از هر کدوم از این جهتا چقدره

 Positioned.fill
 یعنی کل فضای container را بگیر

Slider----------------------------------------------------------------------------------------------
همون طور که مشاهده میکنید کتگوری ها به شکل یک انیمیشنی وارد صفحه میشن
 که باعث میشه اصطلاحی که براشون به کار برده میشه تغییر کنه
 لیست نیستن و اسلایدر محسوب میشن

انواع مختلف اسلایدر در ریپازیتوری زیر
https://github.com/serenader2014/flutter_carousel_slider
download zip -> lib folder ->
 تمام فایل هایی که اونجا هستن را کپی کنید و در پروژه خودتون پیست کنید در دایرکتوری زیر
 lib / carousel
 دو تا ایمپورت داره که نمیشناسه تو فیلا پاک کنید
 و اگه چیزی را لازم است ایمپورت کنید

CarouselSlider.builder این هم یک بیلدر دارد
    ** itemCount
    سایز لیست را میگیرد
    ** itemBuilder
     یک فانکشن میگیرد یا ۳ تا ورودی
     context
     index
     realIndex برای وقتی که infinite loop فعال است
     داخل این فانکشن آیتمی که row اون اسلایدر است را برمیگردانیم
     ** options
     تنظیمات مربوط به اسلایدر

ما به این علت این کتابخانه را به صورت dependeny اضافه نکردیم که میخواستیم یک تغییراتی توی سورسش ایجاد کنیم
carousel_slider.dart -> search PageView
PageView == View Pager
padEnds : true , false
اگر attr بالا را false کنید padding اضافه و پیش فرضش را از بین میبرد

carousel_slider.dart -> search getCenterWrapper
حالت دیفالت آیتمی که انتخاب شده بزرگتر میشه ولی کوچیکترا وسط بزرگه هستن
ما میخوایم کوچیکا بچسبن به بالا
alignment: Alignment.topCenter,
خط کد بالا را اضافه میکنیم
و توی آپشن ها
 enlargeStrategy: CenterPageEnlargeStrategy.height
 استراتژی scale کردن آیتم ها را بر اساس ارتفاع قرار میدیم
 disableCenter: true,
 این هم باید true باشد

Image-----------------------------------------------------------------------------------------------
fit == scale type

Container-------------------------------------------------------------------------------------------
** decoration : افکت های پشت
** foregroundDecoration : افکت های روی آیتم

cardView shadow-------------------------------------------------------------------------------------
برای ایجاد سایه حالت کارد ویو از یک stack استفاده میکنیم
بعد داخلش یک  Positioned.fill میندازیم
فرزندش یک container میشود که decoration آن سایه دارد
با margin محل سایه را اصلاح میکنیم
رنگ و میزان نامریی بودن سایه هم دستمونه

TextButton------------------------------------------------------------------------------------------
تکستی که متد onTap دارد و افکت کلیک

Center----------------------------------------------------------------------------------------------
دقیقا از بالا و پایین و چپ و راست وسط پرنتش قرار میگیره
و یک   alignment: Alignment.topCenter, میگیرد که تعیین میکند تک فرزندش فرزندش کجاش قرار بگیره

Indicator-------------------------------------------------------------------------------------------
https://pub.dev/packages/smooth_page_indicator

برای استفاه از این ویجت حتما باید stateful باشیم

widget : SmoothPageIndicator

** controller
مربوط به pageView ای است که قرار است استفاده کنیم
یک متغیر final ازش تعریف میکنیم و یک instance ازش میسازیم
اینجوری فقط یک بار مقداردهی میشود

** count
به تعداد دیتایی که داریم

** effect
تعیین شکل و رنگ ها

PageView--------------------------------------------------------------------------------------------
PageView == viewPager
یک numed constructor دارد به اسم builder

** itemCount
تعداد آیتم ها
** controller
همون توضیحات indicator
اگه controller ندیم بهش هم کار میکنه.
ولی برای سینک شدن pageView با indicator باید یک controller را به جفتشون بدیم
و نیاز به هیچ کد اضافه ای نیست و کار میکند و با هم سینک میشن
ولی اگه بخوایم کار اضافه تر کنبم میتونیم براش کد بزنیم.
مثلا در این مثال میخوایم وقتی به آیتم آخر رسیدیم اتوماتیک بریم صفحه بعد
** itemBuilder
یک widget برمیگردونه

controller-----------------------
یک instance که final است میسازیم
متدهایی دارد از جمله

** addListener
** page
 این pageController یک getter ی دارد به اسم page
 که page ای که در حال حاضر توشیم را داخل خودش نگهدداری میکنه در فرمت double
  چون مثلا وقتی بین دو تا صفحه هستیم مقدارش میشه 1.5
** animateToPage

floatingActionButton--------------------------------------------------------------------------------
** child
** onPressed

داخل scaffold قرار میگیرد و یک ویو به عنوان child میگیرد که می تواند مثلا آیکون آن باشد
در حالت دیفالت گرد و متریال دیزاینی است
ولی میتوانیم customize کنیم

SnackBar--------------------------------------------------------------------------------------------

  void showSnackBar(BuildContext context, String message) {
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(
      content: Text(message),
      behavior: SnackBarBehavior.fixed,
      نوع نمایش اسنک بار را مشخص میکند
      مثلا اگر floating باشه بالای چیزها مثلا fab و bottom nav نمایش میده
      اگر fixed باشد هر چیزی پایین باشه را هل میده بالا و خودش میچسبه پایین

    ));
  }

showSnackBar(context, 'Like button is clicked');

نکته جالب اینکه با نمایش  اسنک بار fab هم میاد بالا
دلیلش اینه که اسکفلد المان های مختلف متریال دیزاین را میشناسه و ساپورت میکنه
اگر خارج از اسکفلد باشیم این اتفاق نمی افته

ScaffoldMessenger:
برای اینکه المان های مختلف یک ویجت اسکفلد بتونن با هم ارتباط بگیرن و صحبت کنن
مثل اپ بار و بادی و ....
برای گرفتن نمونه از این کلاس new نیمکنیم
بلکه با متد of این کار انجام میشه

استایل مربوط به اسنک بار را هم میشه مستقیم داخل خودش تغییر داد هم داخل فایل main. که دومی اصولی تره

Slivers---------------------------------------------------------------------------------------------
SliverAppBar & SliverList---------------------------------------------------------------------------
وقتی از اپ بار عادی استفاده میکنیم و اسکرول میکنیم اپ بار بالا ثابت میمونه
اگه بخوام یک سری تغییرات روی رفتار اپ بار بدم باید از sliverAppBar استفاده کنم
اسلیورها جزو لیست ویوها یا اسکرول ویوهایی هستن توی فلاتر که میتونن با هم تعامل داشته باشن
و برای پیاده سازی اسکرول های تو در تو مورد استفاده قرار میگیرن
و به ازای اسکرول شدن هر کدام از فرزندانشون به هم اطلاع میدن

توی body
به جای SingleChildScrollView از CustomScrollView استفاده کنید
داخلش به جای children از slivers استفاده کنید
به جای appBar از sliverAppBar استفاده کنید
و تمام attr هایی که قبلا در اپ بار داشتید را داخلش کپی کنید
برای محتوای داخل صفحه به جای column از sliverList استفاده کنید
 به جای crossAxisAlignment یک attr داریم به اسم delegate
 به معنی محول کردن
میایم برای delegate از sliverChildDelegate.fixed استفاده میکنیم
یک لیستی از فرزندان لیستمون باید بهش پاس بدیم
این فرزندان چیان؟
چیزایی که قبلا توی column تعریف کرده بودیم

حالا این sliverList چیه؟
میتونیم ازش برای پیاده سازی لیست های تو در تو استفاده کنیم
برای اینکه به اپ بار بفهمونید من یک محتوای اسکرول شدنی دارم باید از Sliver ها استفاده کنید
که بتونن با هم صحبت کنن

بعد از انجام این تغییرات هم زمان با اسکرول کردن ما اپ بار بالا هم اسکرول میخوره میره بالا

اگر این دو تا ویژگی را در اپ بار اضافه کنیم ثابت میمونه
pinned: true ,
 floating: true ,

 اگر اپ بار elevation داشته باشه:
 زمانی که به بالا میرسیم سایه را از بین میبره و وقتی به پایین میریم سایه دار میشه

 برای پیاده سازی انیمشن های اپ بار از این اسلیورها استفاده میشه
 همچنین برای پیاده سازی لیست های تو در تو

نکته مهم :
فرزندان customScrollView همه باید از نوع sliver باشند و نمیتوان از ویجت های معمولی استفاده کرد
در غیر این صورت خطا میگیریم

BottomNav-------------------------------------------------------------------------------------------

IndexedStack----------------------------------------------------------------------------------------
یک ویجتی است که به هر کدوم از فرزنداش یک ایندکس اختصاص میده
طبیعتا از ۰ شروع میشه ایندکس ها
